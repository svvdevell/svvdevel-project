name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        envs: TELEGRAM_BOT_TOKEN,TELEGRAM_CHAT_ID
        script: |
          set -e
          
          echo "🚀 Starting deployment..."
          cd /root/svvdevel-project
          
          echo "📥 Current commit: $(git rev-parse --short HEAD)"
          
          # 💾 ВАЖНО: Сохраняем базу данных перед обновлением
          echo "💾 Backing up database..."
          if [ -f backend/data/database.db ]; then
            cp backend/data/database.db /tmp/database.db.backup
            echo "✅ Database backed up"
          else
            echo "⚠️ No database found to backup"
          fi
          
          # 💾 Сохраняем загруженные файлы
          echo "💾 Backing up uploads..."
          if [ -d backend/uploads ]; then
            cp -r backend/uploads /tmp/uploads.backup
            echo "✅ Uploads backed up"
          fi
          
          # Сбрасываем все локальные изменения (кроме игнорируемых файлов)
          git checkout .
          # УБРАЛИ git clean -fd чтобы не удалять неотслеживаемые файлы
          
          # Переключаемся на main
          git checkout main
          
          # Подтягиваем последние изменения
          git fetch origin main
          
          # Жёстко сбрасываем на origin/main
          git reset --hard origin/main
          
          echo "✅ New commit: $(git rev-parse --short HEAD)"
          echo "📝 Latest commit message: $(git log -1 --pretty=%B)"
          
          # 🔄 ВАЖНО: Восстанавливаем базу данных
          echo "🔄 Restoring database..."
          if [ -f /tmp/database.db.backup ]; then
            mkdir -p backend/data
            cp /tmp/database.db.backup backend/data/database.db
            echo "✅ Database restored"
            rm /tmp/database.db.backup
          fi
          
          # 🔄 Восстанавливаем uploads
          echo "🔄 Restoring uploads..."
          if [ -d /tmp/uploads.backup ]; then
            mkdir -p backend/uploads
            cp -r /tmp/uploads.backup/* backend/uploads/ 2>/dev/null || true
            echo "✅ Uploads restored"
            rm -rf /tmp/uploads.backup
          fi
          
          # Экспортируем переменные окружения (они уже доступны из envs)
          export TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN}"
          export TELEGRAM_CHAT_ID="${TELEGRAM_CHAT_ID}"
          
          echo "🛑 Stopping containers..."
          docker-compose down
          
          echo "🗑️ Removing old images..."
          docker rmi -f svvdevel-project_frontend 2>/dev/null || true
          docker rmi -f svvdevel-project_backend 2>/dev/null || true
          docker rmi -f svvdevel-project_nginx 2>/dev/null || true
          
          echo "🔨 Building with no cache..."
          docker-compose build --no-cache --pull
          
          echo "🚀 Starting containers..."
          docker-compose up -d
          
          echo "⏳ Waiting 15 seconds..."
          sleep 15
          
          echo "📊 Container status:"
          docker-compose ps
          
          echo "📋 Backend logs (last 20 lines):"
          docker-compose logs --tail=20 backend
          
          echo "📋 Nginx logs (last 20 lines):"
          docker-compose logs --tail=20 nginx
          
          echo "🧹 Cleanup..."
          docker image prune -af
          
          echo "✅ Deployment completed successfully!"
          echo "📍 Final commit: $(git log -1 --oneline)"

    - name: Verify deployment
      run: |
        echo "Verifying site is accessible..."
        sleep 5
        
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://eleganceauto.od.ua/)
        echo "HTTP Status: $HTTP_CODE"
        
        if [ "$HTTP_CODE" == "200" ] || [ "$HTTP_CODE" == "301" ] || [ "$HTTP_CODE" == "302" ]; then
          echo "✅ Site is UP!"
        else
          echo "❌ Site returned: $HTTP_CODE"
          exit 1
        fi